@page "/JobCards"
@rendermode @(new InteractiveServerRenderMode(false))

@attribute [Authorize]

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using System.ComponentModel
@using Syncfusion.XlsIO

@inject ISageInterface sageService
@inject NavigationManager navMan

@attribute [StreamRendering]

<PageTitle>Imported Job Cards</PageTitle>

<h2>Imported Job Cards</h2>

<SfToast @ref="Toast" Timeout="@Options.Timeout" CssClass="@Options.Css" ShowCloseButton="true">
    <ToastTemplates>
        <Title>
            @Options.Title
        </Title>
        <Content>
            @Options.Content
        </Content>
    </ToastTemplates>
    <ToastPosition X="Center" Y="Bottom"></ToastPosition>
</SfToast>

<div id="target">
    <SfGrid @ref="theGrid" DataSource="@theJobCards" AllowFiltering="true" EnableVirtualization="true" Height="600">
        <GridTemplates>
            <ToolbarTemplate>
                <SfToolbar OverflowMode="OverflowMode.MultiRow">
                    <ToolbarEvents Clicked="ToolbarClickHandler"></ToolbarEvents>
                    <ToolbarItems>
                        <ToolbarItem Type="@ItemType.Button" PrefixIcon="e-add" Id="Add" Text="Add" TooltipText="Add"></ToolbarItem>
                        <ToolbarItem Type="@ItemType.Button" PrefixIcon="e-edit" Id="Edit" Text="View" TooltipText="View" Disabled="@ToolBarDisabled"></ToolbarItem>
                        <ToolbarItem Type="@ItemType.Button" PrefixIcon="e-delete" Id="Delete" Text="Delete" TooltipText="Delete" Disabled="@DeleteDisabled"></ToolbarItem>
                        <ToolbarItem Type="@ItemType.Button" PrefixIcon="e-upload-1" Id="Upload" Text="Upload Labour" TooltipText="Upload Labour"></ToolbarItem>
                    </ToolbarItems>
                </SfToolbar>
            </ToolbarTemplate>
        </GridTemplates>
        <GridEvents RowSelected="RowSelecthandler" TValue="ImportHeader"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridColumns>
            <GridColumn Field="ID" HeaderText="ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="80"></GridColumn>
            <GridColumn Field="Customer" HeaderText="Customer" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="240"></GridColumn>
            <GridColumn Field="JobDescription" HeaderText="Job Description" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></GridColumn>
            <GridColumn Field="ExternalOrderNumber" HeaderText="External Order Number" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="320"></GridColumn>
            <GridColumn Field="StartDate" HeaderText="Start Date" Format="dd MMM yyyy" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="180"></GridColumn>
            <GridColumn Field="DeliveryDate" HeaderText="Delivery Date" Format="dd MMM yyyy" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="180"></GridColumn>
            <GridColumn Field="ClosingDate" HeaderText="Closing Date" Format="dd MMM yyyy" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="180"></GridColumn>
            <GridColumn Field="JCNumber" HeaderText="Job Card Number" Width="120" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<SfDialog Target="#target" 
            IsModal="true" 
            ShowCloseIcon="true"
            @bind-Visible="@IsVisible"
            Width="500px"
            >
            <DialogTemplates>
        <Header>Add Job Card </Header>
        <Content>
             <SfDataForm ID="MyForm"
                Model="@SeletcedImportHeader"
                ButtonsAlignment="FormButtonsAlignment.Right"
                ValidationDisplayMode="FormValidationDisplay.Tooltip"
                OnSubmit="SubmitHandler">
        <FormValidator>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidator>
        <FormItems>
            <div class="form-group">
                <label class="e-form-label">Client</label>
                <SfDropDownList TValue="string" TItem="SageClient" DataSource="theClients" @bind-Value="SeletcedImportHeader.Customer" AllowFiltering="true" EnableVirtualization="true" SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.Ascending">
                    <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="string" TItem="SageClient" ValueChange="OnValueChange"></DropDownListEvents>
                </SfDropDownList>
            </div>
            <div class="form-group">
                <label class="e-form-label">Job Description</label>
                <SfTextBox @bind-Value="SeletcedImportHeader.JobDescription"/>
            </div>
            <div class="form-group">
                <label class="e-form-label">External Order Number</label>
                <SfTextBox @bind-Value="SeletcedImportHeader.ExternalOrderNumber"/>
            </div>
            <div class="form-group">
                <label class="e-form-label">Start Date</label>
                <SfDatePicker TValue="DateTime" Format="dd MMM yyyy" @bind-Value="SeletcedImportHeader.StartDate" EnableMask="true"></SfDatePicker>
            </div>
            <div class="form-group">
                <label class="e-form-label">Delivery Date</label>
                <SfDatePicker TValue="DateTime" Format="dd MMM yyyy" @bind-Value="SeletcedImportHeader.DeliveryDate" EnableMask="true"></SfDatePicker>
            </div>
            <div class="form-group">
                <label class="e-form-label">Closing Date</label>
                <SfDatePicker TValue="DateTime" Format="dd MMM yyyy" @bind-Value="SeletcedImportHeader.ClosingDate" EnableMask="true"></SfDatePicker>
            </div>
        </FormItems>
        <FormButtons>
            <SfButton IsPrimary="true" typeof="submit">Add</SfButton>
        </FormButtons>
    </SfDataForm>
        </Content>
    </DialogTemplates>
</SfDialog>

<SfDialog Target="#container" IsModal="true" AllowPrerender="false" ShowCloseIcon="true" @bind-Visible="@IsUpoadVisible" Width="500px">
    <DialogTemplates>
        <Header> Upload Labour from Excel</Header>
        <Content>
            <SfUploader ID="UploadFiles" AllowMultiple=false>
                <UploaderEvents ValueChange="@OnChange"></UploaderEvents>
            </SfUploader>
        </Content>
    </DialogTemplates>
</SfDialog>

<SfDialog Target="#container" IsModal="true" AllowPrerender="false" ShowCloseIcon="true" @bind-Visible="@IsUpoadResultVisible" Width="500px">
    <DialogTemplates>
        <Header> Upload Result</Header>
        <Content>
            <SfGrid DataSource="LabourUploadResult"></SfGrid>
        </Content>
    </DialogTemplates>
</SfDialog>

<SfSpinner @bind-Visible="@SpinnerVisible" Label="Loading...." CssClass="e-spin-overlay" Size="50">
</SfSpinner>

@code {

    List<ImportHeader>? theJobCards { get; set; }
    ImportHeader? SeletcedImportHeader { get; set; }
    SfGrid<ImportHeader>? theGrid;
    List<SageClient>? theClients { get; set; }
    List<LabourExportResult> LabourUploadResult { get; set; } = new List<LabourExportResult>();
    bool ToolBarDisabled = true;
    bool DeleteDisabled  = true;    
    bool IsVisible  = false;
    bool IsUpoadVisible  = false;
    bool IsUpoadResultVisible = false;
    bool SpinnerVisible = false;

    SfToast? Toast;
    private ToastOptions Options = new();

    protected override async Task OnInitializedAsync()
    { 
        theJobCards = await sageService.GetImportHeaders();
        theClients = await sageService.GetSageClients();
    }

    public void OnValueChange(ChangeEventArgs<string, SageClient> args)
    {
        SageClient sc = args.ItemData;
        if(sc==null)
        {
            return;
        }
        SeletcedImportHeader.CustomerID= sc.DCLink;
        SeletcedImportHeader.Customer = sc.Name;
    }

    public async Task RowSelecthandler(RowSelectEventArgs<ImportHeader> Args)
    {
        if (Args.Data == null)
        {
            DeleteDisabled = true;
            ToolBarDisabled = true;
            return;
        }
        SeletcedImportHeader = Args.Data;
        if (SeletcedImportHeader.JCNumber==null)
        {
            DeleteDisabled = false;
        }
        else
        {
            DeleteDisabled = true;
        }
        ToolBarDisabled = false;
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Add")
        {
            SeletcedImportHeader = new ImportHeader();
            SeletcedImportHeader.StartDate = DateTime.Now;
            SeletcedImportHeader.DeliveryDate = DateTime.Now;
            SeletcedImportHeader.ClosingDate = DateTime.Now;
            IsVisible = true;
        }
        if (args.Item.Id == "Edit")
        {
            navMan.NavigateTo($"/JobCardsLines/{SeletcedImportHeader!.ID}");
        }
        if (args.Item.Id == "Delete")
        {
            await sageService.DeleteImportHeaderByHeaderID(SeletcedImportHeader!.ID);
            await sageService.DeleteImportLinesByHeaderID(SeletcedImportHeader.ID);
            theJobCards = await sageService.GetImportHeaders();
            StateHasChanged();
        }
        if (args.Item.Id == "Upload")
        {
            IsUpoadVisible = true;
        }
    }

    public async void SubmitHandler()
    {
        await sageService.AddImportHeader(SeletcedImportHeader);
        IsVisible = false;
        theJobCards = await sageService.GetImportHeaders();
        StateHasChanged();
    }

    private async Task OnChange(UploadChangeEventArgs args)
    {
        IsUpoadVisible = false;
        SpinnerVisible = true;
        foreach (var file in args.Files)
        {
            var rootpath = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data");
            var path = rootpath + "\\" + DateTime.Now.Ticks + " - " + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
            filestream.Close();

            try
            {
                await ProcessFile(path);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        theJobCards = await sageService.GetImportHeaders();
        SpinnerVisible = false;

    }

    async Task ProcessFile(string sfilename)
    {
        List<LabourImport> importLines = new List<LabourImport>();
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;
            FileStream fileStream = new FileStream(sfilename, FileMode.Open, FileAccess.Read);
            IWorkbook workbook = application.Workbooks.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            var rng = worksheet.UsedRange;

            for (int i = 2; i < rng.Rows.Count(); i++)
            {
                Console.WriteLine(i);
                var valueA = worksheet.Range["A" + i].Value;
                var valueB = worksheet.Range["B" + i].Value;
                var valueC = worksheet.Range["C" + i].Value;
                var valueD = worksheet.Range["D" + i].Value;
                var valueE = worksheet.Range["E" + i].Value;

                if (valueA!="")
                {
                    LabourImport li = new LabourImport
                    {
                        JobNo = Convert.ToInt32(valueA),
                        ItemNo = valueB,
                        Reference = valueC,
                        Procedure = valueD,
                        Hours = Convert.ToInt32(valueE)
                    };   
                    importLines.Add(li);
                }                                
            }
        }


        LabourUploadResult = await sageService.PostLabourToSage(importLines);

        IsUpoadResultVisible = true;

    }
}
